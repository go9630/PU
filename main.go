package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"
	"time"
)

var Schid string

func main() {
	var user, passwd, token, secret, id string
	var deadline int64
	fmt.Println("https://github.com/go9630/PU-/")
	fmt.Printf("输入学校缩写:")
	fmt.Scan(&Schid)
	fmt.Printf("输入PU学号:")
	fmt.Scan(&user)
	fmt.Printf("输入PU密码:")
	fmt.Scan(&passwd)
	token, secret = Get_Token_Secret(user, passwd)
	str, id := Get_active_id(token, secret)
	deadline, _ = strconv.ParseInt(str, 10, 64)
	deadline = time_Deadline(deadline)
	time.Sleep(time.Duration(deadline) * time.Second)
	for {
		Run(token, secret, id)
		time.Sleep(3 * time.Second)
	}
}
func time_Deadline(time_Dead int64) int64 {
	time_Dead = time_Dead - time.Now().Unix()
	if time_Dead <= 0 {
		return int64(0)
	} else {
		return time_Dead
	}

}
func net_https(body, url string) []byte {
	client := &http.Client{}
	bodyt := bytes.NewBuffer([]byte(body))
	request, err := http.NewRequest("POST", url, bodyt)
	if err != nil {
		log.Fatal(err)
	}
	request.Header.Add(`Content-Type`, `multipart/form-data; boundary=Boundary+50DE4C5A66DAE438`)
	request.Header.Add(`User-Agent`, `client:iOS version:6.9.10 Product:iPhone OsVersion:15.4.1`)
	response, err := client.Do(request)
	if err != nil {
		log.Fatal(err)
	}
	bodystring, err := ioutil.ReadAll(response.Body)
	if err != nil {
		log.Fatal(err)
	}
	return bodystring
}
func Get_Token_Secret(user, pass string) (string, string) {
	url := "https://pocketuni.net/?app=api&mod=Sitelist&act=login"
	send_body := `--Boundary+50DE4C5A66DAE438
Content-Disposition: form-data; name="client"

2
--Boundary+50DE4C5A66DAE438
Content-Disposition: form-data; name="email"

` + user + `@` + Schid + `.com
--Boundary+50DE4C5A66DAE438
Content-Disposition: form-data; name="password"

` + pass + `
--Boundary+50DE4C5A66DAE438--
`
	get_body := net_https(send_body, url)
	type AutoGenerated struct {
		Content struct {
			OauthTokenSecret string `json:"oauth_token_secret"`
			OauthToken       string `json:"oauth_token"`
		} `json:"content"`
	}
	var exchange AutoGenerated
	json.Unmarshal(get_body, &exchange)
	return exchange.Content.OauthToken, exchange.Content.OauthTokenSecret
}
func Get_active_id(token, secret string) (string, string) {
	var page string
	var i int = 1
	url := "https://pocketuni.net/?app=api&mod=Event&act=newEventList"
	type Get_Active_ID_List struct {
		Content []struct {
			ID        string `json:"id"`
			Title     string `json:"title"`
			Startline string `json:"startline"`
		} `json:"content"`
	}
	var exchange Get_Active_ID_List
	for true {
		fmt.Printf("输入正整数翻页,输入-1以进入下一步:")
		fmt.Scan(&page)
		if page == "-1" {
			break
		}
		request_body := `--Boundary+50DE4C5A66DAE438
Content-Disposition: form-data; name="oauth_token"

` + token + `
--Boundary+50DE4C5A66DAE438
Content-Disposition: form-data; name="oauth_token_secret"

` + secret + `
--Boundary+50DE4C5A66DAE438
Content-Disposition: form-data; name="page"

` + page + `
--Boundary+50DE4C5A66DAE438--
`
		get_body := net_https(request_body, url)
		json.Unmarshal(get_body, &exchange)
		fmt.Printf("\n")
		for _, v := range exchange.Content {
			fmt.Print(i, " ")
			fmt.Print(v.Title, "\n")
			i++
		}
		fmt.Printf("\n")
		i = 1
	}
	fmt.Printf("请输入需抢活动前数字:")
	fmt.Scan(&i)
	fmt.Printf("\n")
	return exchange.Content[i-1].Startline, exchange.Content[i-1].ID
}

type Run1 struct {
	Msg    string `json:"msg"`
	Status int    `json:"status"`
}

func Run(token, secret, id string) Run1 {
	url := "https://pocketuni.net/?app=api&mod=Event&act=join2"
	request_body := `--Boundary+50DE4C5A66DAE438
Content-Disposition: form-data; name="id"

` + id + `

--Boundary+50DE4C5A66DAE438
Content-Disposition: form-data; name="oauth_token"

` + token + `
--Boundary+50DE4C5A66DAE438
Content-Disposition: form-data; name="oauth_token_secret"

` + secret + `
--Boundary+50DE4C5A66DAE438--
`
	get_body := net_https(request_body, url)
	var exchange Run1
	err := json.Unmarshal(get_body, &exchange)
	if err != nil {
		fmt.Println(err, "此处为Get_active_id")
	}
	fmt.Println(exchange.Msg)
	return exchange
}
